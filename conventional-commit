#!/usr/bin/env bash

# Script para configurar hook de Conventional Commits
# Uso: ./conventional-commit

set -e  # Para o script se houver erro

# Cores para output mais amig√°vel
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para exibir mensagens coloridas
print_error() {
    echo -e "${RED}ERRO:${NC} $1"
}

print_success() {
    echo -e "${GREEN}SUCESSO:${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}AVISO:${NC} $1"
}

print_info() {
    echo -e "${BLUE}INFO:${NC} $1"
}

# Verifica se o diret√≥rio atual √© um reposit√≥rio git
if [ ! -d ".git" ]; then
    print_error "Este diret√≥rio n√£o √© um reposit√≥rio Git (n√£o existe a pasta .git)."
    echo
    echo "Para inicializar um reposit√≥rio Git, execute:"
    echo "  git init"
    exit 1
fi

# Caminho para a pasta de hooks
HOOKS_DIR=".git/hooks"
HOOK_FILE="$HOOKS_DIR/commit-msg"

# Verifica se j√° existe um hook commit-msg
if [ -f "$HOOK_FILE" ]; then
    print_warning "J√° existe um hook commit-msg."
    read -p "Deseja sobrescrever? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_info "Opera√ß√£o cancelada."
        exit 0
    fi
    # Faz backup do hook existente
    cp "$HOOK_FILE" "$HOOK_FILE.backup.$(date +%Y%m%d_%H%M%S)"
    print_info "Backup criado: $HOOK_FILE.backup.$(date +%Y%m%d_%H%M%S)"
fi

# Cria o diret√≥rio hooks caso n√£o exista
mkdir -p "$HOOKS_DIR"

# Cria o arquivo commit-msg com o conte√∫do desejado
cat > "$HOOK_FILE" << 'EOF'
#!/usr/bin/env bash

# Hook para validar Conventional Commits
# Gerado automaticamente pelo script conventional-commit

# Path to the commit message file (provided by Git)
COMMIT_MSG_FILE=$1

# Read the commit message from the file
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# Remove leading/trailing whitespace
COMMIT_MSG=$(echo "$COMMIT_MSG" | xargs)

# Skip empty commits
if [ -z "$COMMIT_MSG" ]; then
    echo "ERRO: Mensagem de commit vazia."
    exit 1
fi

# Skip merge commits, revert commits, and initial commits
if [[ $COMMIT_MSG =~ ^Merge\ branch|^Revert|^Initial\ commit ]]; then
    exit 0
fi

# Conventional Commits regex pattern
# Matches: type(scope): description
# Optional: breaking change indicator (!)
CONVENTIONAL_COMMIT_REGEX='^(feat|fix|docs|style|refactor|test|chore|build|ci|perf|revert)(\([a-zA-Z0-9_.-]+\))?(!)?:\s+.{1,}$'

# Check if the commit message matches the regex
if ! [[ $COMMIT_MSG =~ $CONVENTIONAL_COMMIT_REGEX ]]; then
    echo "‚ùå ERRO: A mensagem de commit n√£o segue o formato do Conventional Commits."
    echo
    echo "üìù Formato obrigat√≥rio:"
    echo "   <tipo>(<escopo opcional>): <descri√ß√£o>"
    echo
    echo "üè∑Ô∏è  Tipos v√°lidos:"
    echo "   feat     - Nova funcionalidade"
    echo "   fix      - Corre√ß√£o de bug"
    echo "   docs     - Altera√ß√µes na documenta√ß√£o"
    echo "   style    - Formata√ß√£o, espa√ßos, etc. (sem mudan√ßa de c√≥digo)"
    echo "   refactor - Refatora√ß√£o (sem nova funcionalidade ou corre√ß√£o)"
    echo "   test     - Adicionar ou modificar testes"
    echo "   chore    - Manuten√ß√£o geral (depend√™ncias, ferramentas)"
    echo "   build    - Sistema de build ou depend√™ncias externas"
    echo "   ci       - Configura√ß√£o de CI/CD"
    echo "   perf     - Melhoria de performance"
    echo "   revert   - Reverter commit anterior"
    echo
    echo "‚ú® Exemplos v√°lidos:"
    echo "   feat(auth): adicionar autentica√ß√£o JWT"
    echo "   fix(api): corrigir timeout na requisi√ß√£o"
    echo "   docs: atualizar README com instru√ß√µes"
    echo "   style(components): ajustar indenta√ß√£o"
    echo "   feat!: mudan√ßa que quebra compatibilidade"
    echo
    echo "‚ùå Sua mensagem:"
    echo "   \"$COMMIT_MSG\""
    echo
    exit 1
fi

# Success - commit message is valid
exit 0
EOF

# D√° permiss√£o de execu√ß√£o
chmod +x "$HOOK_FILE"

print_success "Hook commit-msg configurado com sucesso!"
echo
print_info "O hook foi instalado em: $HOOK_FILE"
echo
echo "üéØ A partir de agora, todos os commits deste reposit√≥rio ser√£o validados"
echo "   automaticamente para seguir o padr√£o Conventional Commits."
echo
echo "üí° Para testar o hook, fa√ßa um commit:"
echo "   git add ."
echo "   git commit -m \"feat: adicionar nova funcionalidade\""
echo
echo "üîß Para remover o hook, execute:"
echo "   rm $HOOK_FILE"
